// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Dnlbb/auth/pkg/auth_v1.AuthClient -o auth_client_minimock.go -n AuthClientMock -p mocks

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_auth_v1 "github.com/Dnlbb/auth/pkg/auth_v1"
	"github.com/gojuno/minimock/v3"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AuthClientMock implements mm_auth_v1.AuthClient
type AuthClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption) (cp1 *mm_auth_v1.CreateResponse, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mAuthClientMockCreate

	funcDelete          func(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mAuthClientMockDelete

	funcGet          func(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption) (gp1 *mm_auth_v1.GetResponse, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mAuthClientMockGet

	funcUpdate          func(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mAuthClientMockUpdate
}

// NewAuthClientMock returns a mock for mm_auth_v1.AuthClient
func NewAuthClientMock(t minimock.Tester) *AuthClientMock {
	m := &AuthClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mAuthClientMockCreate{mock: m}
	m.CreateMock.callArgs = []*AuthClientMockCreateParams{}

	m.DeleteMock = mAuthClientMockDelete{mock: m}
	m.DeleteMock.callArgs = []*AuthClientMockDeleteParams{}

	m.GetMock = mAuthClientMockGet{mock: m}
	m.GetMock.callArgs = []*AuthClientMockGetParams{}

	m.UpdateMock = mAuthClientMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*AuthClientMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthClientMockCreate struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockCreateExpectation
	expectations       []*AuthClientMockCreateExpectation

	callArgs []*AuthClientMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockCreateExpectation specifies expectation struct of the AuthClient.Create
type AuthClientMockCreateExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockCreateParams
	paramPtrs          *AuthClientMockCreateParamPtrs
	expectationOrigins AuthClientMockCreateExpectationOrigins
	results            *AuthClientMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockCreateParams contains parameters of the AuthClient.Create
type AuthClientMockCreateParams struct {
	ctx  context.Context
	in   *mm_auth_v1.CreateRequest
	opts []grpc.CallOption
}

// AuthClientMockCreateParamPtrs contains pointers to parameters of the AuthClient.Create
type AuthClientMockCreateParamPtrs struct {
	ctx  *context.Context
	in   **mm_auth_v1.CreateRequest
	opts *[]grpc.CallOption
}

// AuthClientMockCreateResults contains results of the AuthClient.Create
type AuthClientMockCreateResults struct {
	cp1 *mm_auth_v1.CreateResponse
	err error
}

// AuthClientMockCreateOrigins contains origins of expectations of the AuthClient.Create
type AuthClientMockCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mAuthClientMockCreate) Optional() *mAuthClientMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for AuthClient.Create
func (mmCreate *mAuthClientMockCreate) Expect(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption) *mAuthClientMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthClientMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &AuthClientMockCreateParams{ctx, in, opts}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Create
func (mmCreate *mAuthClientMockCreate) ExpectCtxParam1(ctx context.Context) *mAuthClientMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthClientMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &AuthClientMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectInParam2 sets up expected param in for AuthClient.Create
func (mmCreate *mAuthClientMockCreate) ExpectInParam2(in *mm_auth_v1.CreateRequest) *mAuthClientMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthClientMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &AuthClientMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.in = &in
	mmCreate.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Create
func (mmCreate *mAuthClientMockCreate) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthClientMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &AuthClientMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.opts = &opts
	mmCreate.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Create
func (mmCreate *mAuthClientMockCreate) Inspect(f func(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption)) *mAuthClientMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by AuthClient.Create
func (mmCreate *mAuthClientMockCreate) Return(cp1 *mm_auth_v1.CreateResponse, err error) *AuthClientMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthClientMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &AuthClientMockCreateResults{cp1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the AuthClient.Create method
func (mmCreate *mAuthClientMockCreate) Set(f func(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption) (cp1 *mm_auth_v1.CreateResponse, err error)) *AuthClientMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the AuthClient.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the AuthClient.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the AuthClient.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mAuthClientMockCreate) When(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption) *AuthClientMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthClientMock.Create mock is already set by Set")
	}

	expectation := &AuthClientMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &AuthClientMockCreateParams{ctx, in, opts},
		expectationOrigins: AuthClientMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Create return parameters for the expectation previously defined by the When method
func (e *AuthClientMockCreateExpectation) Then(cp1 *mm_auth_v1.CreateResponse, err error) *AuthClientMock {
	e.results = &AuthClientMockCreateResults{cp1, err}
	return e.mock
}

// Times sets number of times AuthClient.Create should be invoked
func (mmCreate *mAuthClientMockCreate) Times(n uint64) *mAuthClientMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of AuthClientMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mAuthClientMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_auth_v1.AuthClient
func (mmCreate *AuthClientMock) Create(ctx context.Context, in *mm_auth_v1.CreateRequest, opts ...grpc.CallOption) (cp1 *mm_auth_v1.CreateResponse, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, in, opts...)
	}

	mm_params := AuthClientMockCreateParams{ctx, in, opts}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockCreateParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("AuthClientMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCreate.t.Errorf("AuthClientMock.Create got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmCreate.t.Errorf("AuthClientMock.Create got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("AuthClientMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the AuthClientMock.Create")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, in, opts...)
	}
	mmCreate.t.Fatalf("Unexpected call to AuthClientMock.Create. %v %v %v", ctx, in, opts)
	return
}

// CreateAfterCounter returns a count of finished AuthClientMock.Create invocations
func (mmCreate *AuthClientMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of AuthClientMock.Create invocations
func (mmCreate *AuthClientMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mAuthClientMockCreate) Calls() []*AuthClientMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*AuthClientMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *AuthClientMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mAuthClientMockDelete struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockDeleteExpectation
	expectations       []*AuthClientMockDeleteExpectation

	callArgs []*AuthClientMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockDeleteExpectation specifies expectation struct of the AuthClient.Delete
type AuthClientMockDeleteExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockDeleteParams
	paramPtrs          *AuthClientMockDeleteParamPtrs
	expectationOrigins AuthClientMockDeleteExpectationOrigins
	results            *AuthClientMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockDeleteParams contains parameters of the AuthClient.Delete
type AuthClientMockDeleteParams struct {
	ctx  context.Context
	in   *mm_auth_v1.DeleteRequest
	opts []grpc.CallOption
}

// AuthClientMockDeleteParamPtrs contains pointers to parameters of the AuthClient.Delete
type AuthClientMockDeleteParamPtrs struct {
	ctx  *context.Context
	in   **mm_auth_v1.DeleteRequest
	opts *[]grpc.CallOption
}

// AuthClientMockDeleteResults contains results of the AuthClient.Delete
type AuthClientMockDeleteResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthClientMockDeleteOrigins contains origins of expectations of the AuthClient.Delete
type AuthClientMockDeleteExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mAuthClientMockDelete) Optional() *mAuthClientMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) Expect(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption) *mAuthClientMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthClientMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &AuthClientMockDeleteParams{ctx, in, opts}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) ExpectCtxParam1(ctx context.Context) *mAuthClientMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthClientMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &AuthClientMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectInParam2 sets up expected param in for AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) ExpectInParam2(in *mm_auth_v1.DeleteRequest) *mAuthClientMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthClientMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &AuthClientMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.in = &in
	mmDelete.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthClientMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &AuthClientMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.opts = &opts
	mmDelete.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) Inspect(f func(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption)) *mAuthClientMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by AuthClient.Delete
func (mmDelete *mAuthClientMockDelete) Return(ep1 *emptypb.Empty, err error) *AuthClientMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthClientMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &AuthClientMockDeleteResults{ep1, err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the AuthClient.Delete method
func (mmDelete *mAuthClientMockDelete) Set(f func(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *AuthClientMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the AuthClient.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the AuthClient.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the AuthClient.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mAuthClientMockDelete) When(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption) *AuthClientMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthClientMock.Delete mock is already set by Set")
	}

	expectation := &AuthClientMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &AuthClientMockDeleteParams{ctx, in, opts},
		expectationOrigins: AuthClientMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Delete return parameters for the expectation previously defined by the When method
func (e *AuthClientMockDeleteExpectation) Then(ep1 *emptypb.Empty, err error) *AuthClientMock {
	e.results = &AuthClientMockDeleteResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthClient.Delete should be invoked
func (mmDelete *mAuthClientMockDelete) Times(n uint64) *mAuthClientMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of AuthClientMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mAuthClientMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_auth_v1.AuthClient
func (mmDelete *AuthClientMock) Delete(ctx context.Context, in *mm_auth_v1.DeleteRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, in, opts...)
	}

	mm_params := AuthClientMockDeleteParams{ctx, in, opts}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockDeleteParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("AuthClientMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmDelete.t.Errorf("AuthClientMock.Delete got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmDelete.t.Errorf("AuthClientMock.Delete got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("AuthClientMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the AuthClientMock.Delete")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, in, opts...)
	}
	mmDelete.t.Fatalf("Unexpected call to AuthClientMock.Delete. %v %v %v", ctx, in, opts)
	return
}

// DeleteAfterCounter returns a count of finished AuthClientMock.Delete invocations
func (mmDelete *AuthClientMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of AuthClientMock.Delete invocations
func (mmDelete *AuthClientMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mAuthClientMockDelete) Calls() []*AuthClientMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*AuthClientMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *AuthClientMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mAuthClientMockGet struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockGetExpectation
	expectations       []*AuthClientMockGetExpectation

	callArgs []*AuthClientMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockGetExpectation specifies expectation struct of the AuthClient.Get
type AuthClientMockGetExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockGetParams
	paramPtrs          *AuthClientMockGetParamPtrs
	expectationOrigins AuthClientMockGetExpectationOrigins
	results            *AuthClientMockGetResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockGetParams contains parameters of the AuthClient.Get
type AuthClientMockGetParams struct {
	ctx  context.Context
	in   *mm_auth_v1.GetRequest
	opts []grpc.CallOption
}

// AuthClientMockGetParamPtrs contains pointers to parameters of the AuthClient.Get
type AuthClientMockGetParamPtrs struct {
	ctx  *context.Context
	in   **mm_auth_v1.GetRequest
	opts *[]grpc.CallOption
}

// AuthClientMockGetResults contains results of the AuthClient.Get
type AuthClientMockGetResults struct {
	gp1 *mm_auth_v1.GetResponse
	err error
}

// AuthClientMockGetOrigins contains origins of expectations of the AuthClient.Get
type AuthClientMockGetExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mAuthClientMockGet) Optional() *mAuthClientMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for AuthClient.Get
func (mmGet *mAuthClientMockGet) Expect(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption) *mAuthClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthClientMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &AuthClientMockGetParams{ctx, in, opts}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Get
func (mmGet *mAuthClientMockGet) ExpectCtxParam1(ctx context.Context) *mAuthClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthClientMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AuthClientMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectInParam2 sets up expected param in for AuthClient.Get
func (mmGet *mAuthClientMockGet) ExpectInParam2(in *mm_auth_v1.GetRequest) *mAuthClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthClientMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AuthClientMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.in = &in
	mmGet.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGet
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Get
func (mmGet *mAuthClientMockGet) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthClientMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AuthClientMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.opts = &opts
	mmGet.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Get
func (mmGet *mAuthClientMockGet) Inspect(f func(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption)) *mAuthClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by AuthClient.Get
func (mmGet *mAuthClientMockGet) Return(gp1 *mm_auth_v1.GetResponse, err error) *AuthClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &AuthClientMockGetResults{gp1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the AuthClient.Get method
func (mmGet *mAuthClientMockGet) Set(f func(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption) (gp1 *mm_auth_v1.GetResponse, err error)) *AuthClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the AuthClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the AuthClient.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the AuthClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mAuthClientMockGet) When(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption) *AuthClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthClientMock.Get mock is already set by Set")
	}

	expectation := &AuthClientMockGetExpectation{
		mock:               mmGet.mock,
		params:             &AuthClientMockGetParams{ctx, in, opts},
		expectationOrigins: AuthClientMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Get return parameters for the expectation previously defined by the When method
func (e *AuthClientMockGetExpectation) Then(gp1 *mm_auth_v1.GetResponse, err error) *AuthClientMock {
	e.results = &AuthClientMockGetResults{gp1, err}
	return e.mock
}

// Times sets number of times AuthClient.Get should be invoked
func (mmGet *mAuthClientMockGet) Times(n uint64) *mAuthClientMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of AuthClientMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mAuthClientMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_auth_v1.AuthClient
func (mmGet *AuthClientMock) Get(ctx context.Context, in *mm_auth_v1.GetRequest, opts ...grpc.CallOption) (gp1 *mm_auth_v1.GetResponse, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, in, opts...)
	}

	mm_params := AuthClientMockGetParams{ctx, in, opts}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockGetParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("AuthClientMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGet.t.Errorf("AuthClientMock.Get got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGet.t.Errorf("AuthClientMock.Get got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("AuthClientMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the AuthClientMock.Get")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, in, opts...)
	}
	mmGet.t.Fatalf("Unexpected call to AuthClientMock.Get. %v %v %v", ctx, in, opts)
	return
}

// GetAfterCounter returns a count of finished AuthClientMock.Get invocations
func (mmGet *AuthClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of AuthClientMock.Get invocations
func (mmGet *AuthClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mAuthClientMockGet) Calls() []*AuthClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*AuthClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *AuthClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mAuthClientMockUpdate struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockUpdateExpectation
	expectations       []*AuthClientMockUpdateExpectation

	callArgs []*AuthClientMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockUpdateExpectation specifies expectation struct of the AuthClient.Update
type AuthClientMockUpdateExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockUpdateParams
	paramPtrs          *AuthClientMockUpdateParamPtrs
	expectationOrigins AuthClientMockUpdateExpectationOrigins
	results            *AuthClientMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockUpdateParams contains parameters of the AuthClient.Update
type AuthClientMockUpdateParams struct {
	ctx  context.Context
	in   *mm_auth_v1.UpdateRequest
	opts []grpc.CallOption
}

// AuthClientMockUpdateParamPtrs contains pointers to parameters of the AuthClient.Update
type AuthClientMockUpdateParamPtrs struct {
	ctx  *context.Context
	in   **mm_auth_v1.UpdateRequest
	opts *[]grpc.CallOption
}

// AuthClientMockUpdateResults contains results of the AuthClient.Update
type AuthClientMockUpdateResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthClientMockUpdateOrigins contains origins of expectations of the AuthClient.Update
type AuthClientMockUpdateExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mAuthClientMockUpdate) Optional() *mAuthClientMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) Expect(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption) *mAuthClientMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthClientMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &AuthClientMockUpdateParams{ctx, in, opts}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) ExpectCtxParam1(ctx context.Context) *mAuthClientMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthClientMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &AuthClientMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectInParam2 sets up expected param in for AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) ExpectInParam2(in *mm_auth_v1.UpdateRequest) *mAuthClientMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthClientMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &AuthClientMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.in = &in
	mmUpdate.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthClientMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &AuthClientMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.opts = &opts
	mmUpdate.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) Inspect(f func(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption)) *mAuthClientMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by AuthClient.Update
func (mmUpdate *mAuthClientMockUpdate) Return(ep1 *emptypb.Empty, err error) *AuthClientMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthClientMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &AuthClientMockUpdateResults{ep1, err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the AuthClient.Update method
func (mmUpdate *mAuthClientMockUpdate) Set(f func(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *AuthClientMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the AuthClient.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the AuthClient.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the AuthClient.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mAuthClientMockUpdate) When(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption) *AuthClientMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthClientMock.Update mock is already set by Set")
	}

	expectation := &AuthClientMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &AuthClientMockUpdateParams{ctx, in, opts},
		expectationOrigins: AuthClientMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Update return parameters for the expectation previously defined by the When method
func (e *AuthClientMockUpdateExpectation) Then(ep1 *emptypb.Empty, err error) *AuthClientMock {
	e.results = &AuthClientMockUpdateResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthClient.Update should be invoked
func (mmUpdate *mAuthClientMockUpdate) Times(n uint64) *mAuthClientMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of AuthClientMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mAuthClientMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_auth_v1.AuthClient
func (mmUpdate *AuthClientMock) Update(ctx context.Context, in *mm_auth_v1.UpdateRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, in, opts...)
	}

	mm_params := AuthClientMockUpdateParams{ctx, in, opts}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockUpdateParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("AuthClientMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmUpdate.t.Errorf("AuthClientMock.Update got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmUpdate.t.Errorf("AuthClientMock.Update got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("AuthClientMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the AuthClientMock.Update")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, in, opts...)
	}
	mmUpdate.t.Fatalf("Unexpected call to AuthClientMock.Update. %v %v %v", ctx, in, opts)
	return
}

// UpdateAfterCounter returns a count of finished AuthClientMock.Update invocations
func (mmUpdate *AuthClientMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of AuthClientMock.Update invocations
func (mmUpdate *AuthClientMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mAuthClientMockUpdate) Calls() []*AuthClientMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*AuthClientMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *AuthClientMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockUpdateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone()
}
