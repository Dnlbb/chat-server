// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Dnlbb/chat-server/internal/repository/repointerface.AuthInterface -o auth_interface_minimock.go -n AuthInterfaceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Dnlbb/chat-server/internal/models"
	"github.com/gojuno/minimock/v3"
)

// AuthInterfaceMock implements mm_repointerface.AuthInterface
type AuthInterfaceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetIDs          func(ctx context.Context, usernames models.Usernames) (ia1 []models.ID, err error)
	funcGetIDsOrigin    string
	inspectFuncGetIDs   func(ctx context.Context, usernames models.Usernames)
	afterGetIDsCounter  uint64
	beforeGetIDsCounter uint64
	GetIDsMock          mAuthInterfaceMockGetIDs
}

// NewAuthInterfaceMock returns a mock for mm_repointerface.AuthInterface
func NewAuthInterfaceMock(t minimock.Tester) *AuthInterfaceMock {
	m := &AuthInterfaceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetIDsMock = mAuthInterfaceMockGetIDs{mock: m}
	m.GetIDsMock.callArgs = []*AuthInterfaceMockGetIDsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthInterfaceMockGetIDs struct {
	optional           bool
	mock               *AuthInterfaceMock
	defaultExpectation *AuthInterfaceMockGetIDsExpectation
	expectations       []*AuthInterfaceMockGetIDsExpectation

	callArgs []*AuthInterfaceMockGetIDsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthInterfaceMockGetIDsExpectation specifies expectation struct of the AuthInterface.GetIDs
type AuthInterfaceMockGetIDsExpectation struct {
	mock               *AuthInterfaceMock
	params             *AuthInterfaceMockGetIDsParams
	paramPtrs          *AuthInterfaceMockGetIDsParamPtrs
	expectationOrigins AuthInterfaceMockGetIDsExpectationOrigins
	results            *AuthInterfaceMockGetIDsResults
	returnOrigin       string
	Counter            uint64
}

// AuthInterfaceMockGetIDsParams contains parameters of the AuthInterface.GetIDs
type AuthInterfaceMockGetIDsParams struct {
	ctx       context.Context
	usernames models.Usernames
}

// AuthInterfaceMockGetIDsParamPtrs contains pointers to parameters of the AuthInterface.GetIDs
type AuthInterfaceMockGetIDsParamPtrs struct {
	ctx       *context.Context
	usernames *models.Usernames
}

// AuthInterfaceMockGetIDsResults contains results of the AuthInterface.GetIDs
type AuthInterfaceMockGetIDsResults struct {
	ia1 []models.ID
	err error
}

// AuthInterfaceMockGetIDsOrigins contains origins of expectations of the AuthInterface.GetIDs
type AuthInterfaceMockGetIDsExpectationOrigins struct {
	origin          string
	originCtx       string
	originUsernames string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetIDs *mAuthInterfaceMockGetIDs) Optional() *mAuthInterfaceMockGetIDs {
	mmGetIDs.optional = true
	return mmGetIDs
}

// Expect sets up expected params for AuthInterface.GetIDs
func (mmGetIDs *mAuthInterfaceMockGetIDs) Expect(ctx context.Context, usernames models.Usernames) *mAuthInterfaceMockGetIDs {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &AuthInterfaceMockGetIDsExpectation{}
	}

	if mmGetIDs.defaultExpectation.paramPtrs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by ExpectParams functions")
	}

	mmGetIDs.defaultExpectation.params = &AuthInterfaceMockGetIDsParams{ctx, usernames}
	mmGetIDs.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetIDs.expectations {
		if minimock.Equal(e.params, mmGetIDs.defaultExpectation.params) {
			mmGetIDs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetIDs.defaultExpectation.params)
		}
	}

	return mmGetIDs
}

// ExpectCtxParam1 sets up expected param ctx for AuthInterface.GetIDs
func (mmGetIDs *mAuthInterfaceMockGetIDs) ExpectCtxParam1(ctx context.Context) *mAuthInterfaceMockGetIDs {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &AuthInterfaceMockGetIDsExpectation{}
	}

	if mmGetIDs.defaultExpectation.params != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Expect")
	}

	if mmGetIDs.defaultExpectation.paramPtrs == nil {
		mmGetIDs.defaultExpectation.paramPtrs = &AuthInterfaceMockGetIDsParamPtrs{}
	}
	mmGetIDs.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetIDs.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetIDs
}

// ExpectUsernamesParam2 sets up expected param usernames for AuthInterface.GetIDs
func (mmGetIDs *mAuthInterfaceMockGetIDs) ExpectUsernamesParam2(usernames models.Usernames) *mAuthInterfaceMockGetIDs {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &AuthInterfaceMockGetIDsExpectation{}
	}

	if mmGetIDs.defaultExpectation.params != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Expect")
	}

	if mmGetIDs.defaultExpectation.paramPtrs == nil {
		mmGetIDs.defaultExpectation.paramPtrs = &AuthInterfaceMockGetIDsParamPtrs{}
	}
	mmGetIDs.defaultExpectation.paramPtrs.usernames = &usernames
	mmGetIDs.defaultExpectation.expectationOrigins.originUsernames = minimock.CallerInfo(1)

	return mmGetIDs
}

// Inspect accepts an inspector function that has same arguments as the AuthInterface.GetIDs
func (mmGetIDs *mAuthInterfaceMockGetIDs) Inspect(f func(ctx context.Context, usernames models.Usernames)) *mAuthInterfaceMockGetIDs {
	if mmGetIDs.mock.inspectFuncGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("Inspect function is already set for AuthInterfaceMock.GetIDs")
	}

	mmGetIDs.mock.inspectFuncGetIDs = f

	return mmGetIDs
}

// Return sets up results that will be returned by AuthInterface.GetIDs
func (mmGetIDs *mAuthInterfaceMockGetIDs) Return(ia1 []models.ID, err error) *AuthInterfaceMock {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &AuthInterfaceMockGetIDsExpectation{mock: mmGetIDs.mock}
	}
	mmGetIDs.defaultExpectation.results = &AuthInterfaceMockGetIDsResults{ia1, err}
	mmGetIDs.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetIDs.mock
}

// Set uses given function f to mock the AuthInterface.GetIDs method
func (mmGetIDs *mAuthInterfaceMockGetIDs) Set(f func(ctx context.Context, usernames models.Usernames) (ia1 []models.ID, err error)) *AuthInterfaceMock {
	if mmGetIDs.defaultExpectation != nil {
		mmGetIDs.mock.t.Fatalf("Default expectation is already set for the AuthInterface.GetIDs method")
	}

	if len(mmGetIDs.expectations) > 0 {
		mmGetIDs.mock.t.Fatalf("Some expectations are already set for the AuthInterface.GetIDs method")
	}

	mmGetIDs.mock.funcGetIDs = f
	mmGetIDs.mock.funcGetIDsOrigin = minimock.CallerInfo(1)
	return mmGetIDs.mock
}

// When sets expectation for the AuthInterface.GetIDs which will trigger the result defined by the following
// Then helper
func (mmGetIDs *mAuthInterfaceMockGetIDs) When(ctx context.Context, usernames models.Usernames) *AuthInterfaceMockGetIDsExpectation {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("AuthInterfaceMock.GetIDs mock is already set by Set")
	}

	expectation := &AuthInterfaceMockGetIDsExpectation{
		mock:               mmGetIDs.mock,
		params:             &AuthInterfaceMockGetIDsParams{ctx, usernames},
		expectationOrigins: AuthInterfaceMockGetIDsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetIDs.expectations = append(mmGetIDs.expectations, expectation)
	return expectation
}

// Then sets up AuthInterface.GetIDs return parameters for the expectation previously defined by the When method
func (e *AuthInterfaceMockGetIDsExpectation) Then(ia1 []models.ID, err error) *AuthInterfaceMock {
	e.results = &AuthInterfaceMockGetIDsResults{ia1, err}
	return e.mock
}

// Times sets number of times AuthInterface.GetIDs should be invoked
func (mmGetIDs *mAuthInterfaceMockGetIDs) Times(n uint64) *mAuthInterfaceMockGetIDs {
	if n == 0 {
		mmGetIDs.mock.t.Fatalf("Times of AuthInterfaceMock.GetIDs mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetIDs.expectedInvocations, n)
	mmGetIDs.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetIDs
}

func (mmGetIDs *mAuthInterfaceMockGetIDs) invocationsDone() bool {
	if len(mmGetIDs.expectations) == 0 && mmGetIDs.defaultExpectation == nil && mmGetIDs.mock.funcGetIDs == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetIDs.mock.afterGetIDsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetIDs.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetIDs implements mm_repointerface.AuthInterface
func (mmGetIDs *AuthInterfaceMock) GetIDs(ctx context.Context, usernames models.Usernames) (ia1 []models.ID, err error) {
	mm_atomic.AddUint64(&mmGetIDs.beforeGetIDsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIDs.afterGetIDsCounter, 1)

	mmGetIDs.t.Helper()

	if mmGetIDs.inspectFuncGetIDs != nil {
		mmGetIDs.inspectFuncGetIDs(ctx, usernames)
	}

	mm_params := AuthInterfaceMockGetIDsParams{ctx, usernames}

	// Record call args
	mmGetIDs.GetIDsMock.mutex.Lock()
	mmGetIDs.GetIDsMock.callArgs = append(mmGetIDs.GetIDsMock.callArgs, &mm_params)
	mmGetIDs.GetIDsMock.mutex.Unlock()

	for _, e := range mmGetIDs.GetIDsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.err
		}
	}

	if mmGetIDs.GetIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIDs.GetIDsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetIDs.GetIDsMock.defaultExpectation.params
		mm_want_ptrs := mmGetIDs.GetIDsMock.defaultExpectation.paramPtrs

		mm_got := AuthInterfaceMockGetIDsParams{ctx, usernames}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetIDs.t.Errorf("AuthInterfaceMock.GetIDs got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetIDs.GetIDsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.usernames != nil && !minimock.Equal(*mm_want_ptrs.usernames, mm_got.usernames) {
				mmGetIDs.t.Errorf("AuthInterfaceMock.GetIDs got unexpected parameter usernames, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetIDs.GetIDsMock.defaultExpectation.expectationOrigins.originUsernames, *mm_want_ptrs.usernames, mm_got.usernames, minimock.Diff(*mm_want_ptrs.usernames, mm_got.usernames))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetIDs.t.Errorf("AuthInterfaceMock.GetIDs got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetIDs.GetIDsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetIDs.GetIDsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIDs.t.Fatal("No results are set for the AuthInterfaceMock.GetIDs")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmGetIDs.funcGetIDs != nil {
		return mmGetIDs.funcGetIDs(ctx, usernames)
	}
	mmGetIDs.t.Fatalf("Unexpected call to AuthInterfaceMock.GetIDs. %v %v", ctx, usernames)
	return
}

// GetIDsAfterCounter returns a count of finished AuthInterfaceMock.GetIDs invocations
func (mmGetIDs *AuthInterfaceMock) GetIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIDs.afterGetIDsCounter)
}

// GetIDsBeforeCounter returns a count of AuthInterfaceMock.GetIDs invocations
func (mmGetIDs *AuthInterfaceMock) GetIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIDs.beforeGetIDsCounter)
}

// Calls returns a list of arguments used in each call to AuthInterfaceMock.GetIDs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetIDs *mAuthInterfaceMockGetIDs) Calls() []*AuthInterfaceMockGetIDsParams {
	mmGetIDs.mutex.RLock()

	argCopy := make([]*AuthInterfaceMockGetIDsParams, len(mmGetIDs.callArgs))
	copy(argCopy, mmGetIDs.callArgs)

	mmGetIDs.mutex.RUnlock()

	return argCopy
}

// MinimockGetIDsDone returns true if the count of the GetIDs invocations corresponds
// the number of defined expectations
func (m *AuthInterfaceMock) MinimockGetIDsDone() bool {
	if m.GetIDsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetIDsMock.invocationsDone()
}

// MinimockGetIDsInspect logs each unmet expectation
func (m *AuthInterfaceMock) MinimockGetIDsInspect() {
	for _, e := range m.GetIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthInterfaceMock.GetIDs at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetIDsCounter := mm_atomic.LoadUint64(&m.afterGetIDsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetIDsMock.defaultExpectation != nil && afterGetIDsCounter < 1 {
		if m.GetIDsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthInterfaceMock.GetIDs at\n%s", m.GetIDsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthInterfaceMock.GetIDs at\n%s with params: %#v", m.GetIDsMock.defaultExpectation.expectationOrigins.origin, *m.GetIDsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIDs != nil && afterGetIDsCounter < 1 {
		m.t.Errorf("Expected call to AuthInterfaceMock.GetIDs at\n%s", m.funcGetIDsOrigin)
	}

	if !m.GetIDsMock.invocationsDone() && afterGetIDsCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthInterfaceMock.GetIDs at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetIDsMock.expectedInvocations), m.GetIDsMock.expectedInvocationsOrigin, afterGetIDsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthInterfaceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetIDsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetIDsDone()
}
